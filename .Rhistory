remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
remodeled_housing
reno_value('add_bathroom', 'high')
reno_value('add_bathroom')
upgrade = tryCatch(
match.arg(upgrade, choices = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
several.ok = T),
error = identity
)
budget = tryCatch(
match.arg(budget, choices = c('low', 'medium', 'high'), several.ok = F),
error = identity
)
if(str_detect(upgrade, "Error") | str_detect(budget, "Error")) {
suppressWarnings(return(message(upgrade)))
break()
}
str_detect(upgrade, "Error") | str_detect(budget, "Error")
remodeled_housing = mutate(housing, Reno.Cost = NA_real_)
remodeled_housing = housing
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
remodeled_housing = mutate(housing, Reno.Cost = NA)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
# Update data based on stated upgrades
remodeled_housing = mutate(housing, Reno.Cost = NA_real_)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
'add_bathroom' %in% upgrade
count(remodeled_housing, Reno.Cost)
# Update data based on stated upgrades
remodeled_housing = mutate(housing, Reno.Cost = 0)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
count(remodeled_housing, Reno.Cost)
# Look up average renovation costs; create kitchen/bath flags
# https://www.businessinsider.com/home-renovation-cost-each-room-2019-6
# https://www.superstormrestoration.com/blog/how-much-does-a-new-roof-cost#:~:text=The%20average%20cost%20to%20replace%20a%20roof%20can%20vary%20quite,and%20%245.00%20per%20square%20foot.
reno_value = function(upgrade = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
budget = c('low', 'medium', 'high')) {
# # Confirm upgrade and budget args; otherwise throw an error
upgrade = tryCatch(
match.arg(upgrade, choices = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
several.ok = T),
error = identity
)
budget = tryCatch(
match.arg(budget, choices = c('low', 'medium', 'high'), several.ok = F),
error = identity
)
# Handle errors
if(str_detect(upgrade, "Error") | str_detect(budget, "Error")) {
suppressWarnings(return(message(upgrade)))
break()
} else {
# Update data based on stated upgrades
remodeled_housing = mutate(housing, Reno.Cost = 0)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
# Remodel kitchen
if('remodel_kitchen' %in% upgrade) {
message('Note: Remodeling kitchens that are already of excellent quality (i.e., "Ex") will not increase the estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Kitchen.Qual == 'Ex' ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 12557,
budget == 'medium' ~ Reno.Cost + 23556,
budget == 'high' ~ Reno.Cost + 34789,
T ~ Reno.Cost
),
Kitchen.Qual = case_when(
Kitchen.Qual == 'Gd' ~ 'Ex',
Kitchen.Qual == "TA" & budget == 'low' ~ 'Gd',
Kitchen.Qual == "TA" ~ 'Ex',
Kitchen.Qual == 'Fa' & budget == 'low' ~ "TA",
Kitchen.Qual == 'Fa' & budget == 'medium' ~ "Gd",
Kitchen.Qual == 'Fa' & budget == 'high' ~ 'Ex',
Kitchen.Qual == 'Po' & budget == 'low' ~ 'Fa',
Kitchen.Qual == 'Po' & budget == 'medium' ~ "TA",
Kitchen.Qual == 'Po' & budget == 'high' ~ 'Gd',
T ~ Kitchen.Qual
),
Year.Remod.Add = 2010
)
}
# Finish basement
if('finish_basement' %in% upgrade) {
message('Note: Properties without a basement obviously cannot have finished basements, so this renovation will not increase their estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Bsmt.Cond %in% c("DNE", '') ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 0.75 * 15000,
budget == 'medium' ~ Reno.Cost + 15000,
budget == 'high' ~ Reno.Cost + 1.25 * 15000,
T ~ Reno.Cost
),
BsmtFin.Type.1 = case_when(
Bsmt.Cond %in% c("DNE", '') ~ BsmtFin.Type.1,
budget == 'low' ~ "BLQ",
budget == 'medium' ~ "ALQ",
budget == 'high' ~ "GLQ",
T ~ BsmtFin.Type.1
),
BsmtFin.SF.1 = BsmtFin.SF.1 + Bsmt.Unf.SF,
Year.Remod.Add = 2010
)
}
# Replace roof
if('replace_roof' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5100,
budget == 'medium' ~ Reno.Cost + 10000,
budget == 'high' ~ Reno.Cost + 15000,
T ~ Reno.Cost
),
Exter.Cond = case_when(
Exter.Cond == 'Gd' ~ 'Ex',
Exter.Cond == "TA" & budget == 'low' ~ 'Gd',
Exter.Cond == "TA" ~ 'Ex',
Exter.Cond == "Fa" & budget == 'low' ~ "TA",
Exter.Cond == "Fa" & budget == 'medium' ~ 'Gd',
Exter.Cond == "Fa" & budget == 'high' ~ 'Ex',
Exter.Cond == "Po" & budget == 'low' ~ "Fa",
Exter.Cond == "Po" & budget == 'medium' ~ "TA",
Exter.Cond == "Po" & budget == 'high' ~ 'Gd',
T ~ Exter.Cond
),
Year.Remod.Add = 2010
)
}
# Predict based on new features
costs_benefits = tibble(
orig_predicted_sale_price = as.numeric(lasso_pred),
new_predicted_sale_price = predict(
boost_model,
newdata = remodeled_housing[remodeled_housing$Yr.Sold == 2010, ],
n.trees = 5000
),
remodeling_costs = remodeled_housing[remodeled_housing$Yr.Sold == 2010,
'Reno.Costs']
) %>%
mutate(net = new_predicted_sale_price - remodeling_costs)
# Return costs and predictions
return(list(remodeled_housing = remodeled_housing,
costs_benefits = costs_benefits))
}
}
reno_value('add_bathroom', 'high')
as.numeric(lasso_pred)
predict(
boost_model,
newdata = remodeled_housing[remodeled_housing$Yr.Sold == 2010, ],
n.trees = 5000
)
remodeled_housing[remodeled_housing$Yr.Sold == 2010,
'Reno.Costs']
remodeled_housing
remodeled_housing[remodeled_housing$Yr.Sold == 2010, ]
remodeled_housing[remodeled_housing$Yr.Sold == 2010, 'Reno.Costs']
remodeled_housing[remodeled_housing$Yr.Sold == 2010, 'Reno.Cost']
# Look up average renovation costs; create kitchen/bath flags
# https://www.businessinsider.com/home-renovation-cost-each-room-2019-6
# https://www.superstormrestoration.com/blog/how-much-does-a-new-roof-cost#:~:text=The%20average%20cost%20to%20replace%20a%20roof%20can%20vary%20quite,and%20%245.00%20per%20square%20foot.
reno_value = function(upgrade = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
budget = c('low', 'medium', 'high')) {
# # Confirm upgrade and budget args; otherwise throw an error
upgrade = tryCatch(
match.arg(upgrade, choices = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
several.ok = T),
error = identity
)
budget = tryCatch(
match.arg(budget, choices = c('low', 'medium', 'high'), several.ok = F),
error = identity
)
# Handle errors
if(str_detect(upgrade, "Error") | str_detect(budget, "Error")) {
suppressWarnings(return(message(upgrade)))
break()
} else {
# Update data based on stated upgrades
remodeled_housing = mutate(housing, Reno.Cost = 0)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
# Remodel kitchen
if('remodel_kitchen' %in% upgrade) {
message('Note: Remodeling kitchens that are already of excellent quality (i.e., "Ex") will not increase the estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Kitchen.Qual == 'Ex' ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 12557,
budget == 'medium' ~ Reno.Cost + 23556,
budget == 'high' ~ Reno.Cost + 34789,
T ~ Reno.Cost
),
Kitchen.Qual = case_when(
Kitchen.Qual == 'Gd' ~ 'Ex',
Kitchen.Qual == "TA" & budget == 'low' ~ 'Gd',
Kitchen.Qual == "TA" ~ 'Ex',
Kitchen.Qual == 'Fa' & budget == 'low' ~ "TA",
Kitchen.Qual == 'Fa' & budget == 'medium' ~ "Gd",
Kitchen.Qual == 'Fa' & budget == 'high' ~ 'Ex',
Kitchen.Qual == 'Po' & budget == 'low' ~ 'Fa',
Kitchen.Qual == 'Po' & budget == 'medium' ~ "TA",
Kitchen.Qual == 'Po' & budget == 'high' ~ 'Gd',
T ~ Kitchen.Qual
),
Year.Remod.Add = 2010
)
}
# Finish basement
if('finish_basement' %in% upgrade) {
message('Note: Properties without a basement obviously cannot have finished basements, so this renovation will not increase their estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Bsmt.Cond %in% c("DNE", '') ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 0.75 * 15000,
budget == 'medium' ~ Reno.Cost + 15000,
budget == 'high' ~ Reno.Cost + 1.25 * 15000,
T ~ Reno.Cost
),
BsmtFin.Type.1 = case_when(
Bsmt.Cond %in% c("DNE", '') ~ BsmtFin.Type.1,
budget == 'low' ~ "BLQ",
budget == 'medium' ~ "ALQ",
budget == 'high' ~ "GLQ",
T ~ BsmtFin.Type.1
),
BsmtFin.SF.1 = BsmtFin.SF.1 + Bsmt.Unf.SF,
Year.Remod.Add = 2010
)
}
# Replace roof
if('replace_roof' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5100,
budget == 'medium' ~ Reno.Cost + 10000,
budget == 'high' ~ Reno.Cost + 15000,
T ~ Reno.Cost
),
Exter.Cond = case_when(
Exter.Cond == 'Gd' ~ 'Ex',
Exter.Cond == "TA" & budget == 'low' ~ 'Gd',
Exter.Cond == "TA" ~ 'Ex',
Exter.Cond == "Fa" & budget == 'low' ~ "TA",
Exter.Cond == "Fa" & budget == 'medium' ~ 'Gd',
Exter.Cond == "Fa" & budget == 'high' ~ 'Ex',
Exter.Cond == "Po" & budget == 'low' ~ "Fa",
Exter.Cond == "Po" & budget == 'medium' ~ "TA",
Exter.Cond == "Po" & budget == 'high' ~ 'Gd',
T ~ Exter.Cond
),
Year.Remod.Add = 2010
)
}
# Predict based on new features
costs_benefits = tibble(
orig_predicted_sale_price = as.numeric(lasso_pred),
new_predicted_sale_price = predict(
boost_model,
newdata = remodeled_housing[remodeled_housing$Yr.Sold == 2010, ],
n.trees = 5000
),
remodeling_costs = remodeled_housing[remodeled_housing$Yr.Sold == 2010,
'Reno.Cost']
) %>%
mutate(net = new_predicted_sale_price - remodeling_costs)
# Return costs and predictions
return(list(remodeled_housing = remodeled_housing,
costs_benefits = costs_benefits))
}
}
reno_value('add_bathroom', 'high')
# Look up average renovation costs; create kitchen/bath flags
# https://www.businessinsider.com/home-renovation-cost-each-room-2019-6
# https://www.superstormrestoration.com/blog/how-much-does-a-new-roof-cost#:~:text=The%20average%20cost%20to%20replace%20a%20roof%20can%20vary%20quite,and%20%245.00%20per%20square%20foot.
reno_value = function(upgrade = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
budget = c('low', 'medium', 'high')) {
# # Confirm upgrade and budget args; otherwise throw an error
upgrade = tryCatch(
match.arg(upgrade, choices = c('add_bathroom', 'remodel_kitchen',
'finish_basement', 'replace_roof'),
several.ok = T),
error = identity
)
budget = tryCatch(
match.arg(budget, choices = c('low', 'medium', 'high'), several.ok = F),
error = identity
)
# Handle errors
if(str_detect(upgrade, "Error") | str_detect(budget, "Error")) {
suppressWarnings(return(message(upgrade)))
break()
} else {
# Update data based on stated upgrades
remodeled_housing = mutate(housing, Reno.Cost = 0)
# Add bathroom
if('add_bathroom' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
budget = budget,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5957,
budget == 'medium' ~ Reno.Cost + 10349,
budget == 'high' ~ Reno.Cost + 14833,
T ~ Reno.Cost
),
Full.Bath = Full.Bath + 1,
Year.Remod.Add = 2010
)
}
# Remodel kitchen
if('remodel_kitchen' %in% upgrade) {
message('Note: Remodeling kitchens that are already of excellent quality (i.e., "Ex") will not increase the estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Kitchen.Qual == 'Ex' ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 12557,
budget == 'medium' ~ Reno.Cost + 23556,
budget == 'high' ~ Reno.Cost + 34789,
T ~ Reno.Cost
),
Kitchen.Qual = case_when(
Kitchen.Qual == 'Gd' ~ 'Ex',
Kitchen.Qual == "TA" & budget == 'low' ~ 'Gd',
Kitchen.Qual == "TA" ~ 'Ex',
Kitchen.Qual == 'Fa' & budget == 'low' ~ "TA",
Kitchen.Qual == 'Fa' & budget == 'medium' ~ "Gd",
Kitchen.Qual == 'Fa' & budget == 'high' ~ 'Ex',
Kitchen.Qual == 'Po' & budget == 'low' ~ 'Fa',
Kitchen.Qual == 'Po' & budget == 'medium' ~ "TA",
Kitchen.Qual == 'Po' & budget == 'high' ~ 'Gd',
T ~ Kitchen.Qual
),
Year.Remod.Add = 2010
)
}
# Finish basement
if('finish_basement' %in% upgrade) {
message('Note: Properties without a basement obviously cannot have finished basements, so this renovation will not increase their estimated sale price.')
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
Bsmt.Cond %in% c("DNE", '') ~ Reno.Cost,
budget == 'low' ~ Reno.Cost + 0.75 * 15000,
budget == 'medium' ~ Reno.Cost + 15000,
budget == 'high' ~ Reno.Cost + 1.25 * 15000,
T ~ Reno.Cost
),
BsmtFin.Type.1 = case_when(
Bsmt.Cond %in% c("DNE", '') ~ BsmtFin.Type.1,
budget == 'low' ~ "BLQ",
budget == 'medium' ~ "ALQ",
budget == 'high' ~ "GLQ",
T ~ BsmtFin.Type.1
),
BsmtFin.SF.1 = BsmtFin.SF.1 + Bsmt.Unf.SF,
Year.Remod.Add = 2010
)
}
# Replace roof
if('replace_roof' %in% upgrade) {
remodeled_housing = mutate(
remodeled_housing,
Reno.Cost = case_when(
budget == 'low' ~ Reno.Cost + 5100,
budget == 'medium' ~ Reno.Cost + 10000,
budget == 'high' ~ Reno.Cost + 15000,
T ~ Reno.Cost
),
Exter.Cond = case_when(
Exter.Cond == 'Gd' ~ 'Ex',
Exter.Cond == "TA" & budget == 'low' ~ 'Gd',
Exter.Cond == "TA" ~ 'Ex',
Exter.Cond == "Fa" & budget == 'low' ~ "TA",
Exter.Cond == "Fa" & budget == 'medium' ~ 'Gd',
Exter.Cond == "Fa" & budget == 'high' ~ 'Ex',
Exter.Cond == "Po" & budget == 'low' ~ "Fa",
Exter.Cond == "Po" & budget == 'medium' ~ "TA",
Exter.Cond == "Po" & budget == 'high' ~ 'Gd',
T ~ Exter.Cond
),
Year.Remod.Add = 2010
)
}
# Predict based on new features
costs_benefits = tibble(
orig_predicted_sale_price = as.numeric(lasso_pred),
new_predicted_sale_price = predict(
boost_model,
newdata = remodeled_housing[remodeled_housing$Yr.Sold == 2010, ],
n.trees = 5000
),
remodeling_costs = remodeled_housing[remodeled_housing$Yr.Sold == 2010,
'Reno.Cost'],
net = new_predicted_sale_price - orig_predicted_sale_price - remodeling_costs
)
# Return costs and predictions
return(list(remodeled_housing = remodeled_housing,
costs_benefits = costs_benefits))
}
}
reno_value('add_bathroom', 'high')
reno_value(c('add_bathroom', 'replace_roof'), 'low')
reno_value('add_bathroom')
reno_value('add_bathroom', 'medium')
reno_value()
count(remodeled_housing, Reno.Cost)
